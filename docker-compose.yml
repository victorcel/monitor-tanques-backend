services:
    # Servicio web con Nginx
    nginx:
        build:
            context: .
            dockerfile: dockerfiles/nginx.dockerfile
        container_name: monitor-nginx
        restart: unless-stopped
        ports:
            - "${APP_PORT:-80}:80"
        volumes:
            - ./:/var/www
            - ./storage/logs/nginx:/var/log/nginx
        depends_on:
            - app
        networks:
            - monitor-tanques-network
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost" ]
            interval: 10s
            timeout: 5s
            retries: 3

    # Servicio principal PHP-FPM
    app:
        build:
            args:
                user: "${APP_USER:-sammy}"
                uid: "${APP_UID:-1000}"
            context: .
            dockerfile: dockerfiles/php.dockerfile
        container_name: monitor-app
        restart: unless-stopped
        working_dir: /var/www
        volumes:
            - ./:/var/www
        depends_on:
            - db
            - setup
        networks:
            - monitor-tanques-network
        healthcheck:
            test: [ "CMD", "php", "-v" ]
            interval: 10s
            timeout: 5s
            retries: 3

    # Servicio de base de datos
    db:
        image: mariadb:10.6-focal
        container_name: monitor-db
        restart: unless-stopped
        ports:
            - "${DB_PORT:-3306}:3306"
        environment:
            MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
            MYSQL_DATABASE: '${DB_DATABASE}'
            MYSQL_USER: '${DB_USERNAME}'
            MYSQL_PASSWORD: '${DB_PASSWORD}'
        volumes:
            - monitor-tanques-mariadb:/var/lib/mysql
        networks:
            - monitor-tanques-network
        healthcheck:
            test: [ "CMD", "mysqladmin", "ping", "-p${DB_PASSWORD}" ]
            interval: 10s
            timeout: 5s
            retries: 3

    # Setup - contenedor para configuración inicial
    setup:
        build:
            context: .
            dockerfile: dockerfiles/composer.dockerfile
        container_name: monitor-setup
        volumes:
            - ./:/var/www
        networks:
            - monitor-tanques-network
        depends_on:
            db:
                condition: service_healthy
        entrypoint: [ "/bin/sh", "-c" ]
        command: |
            "composer install --no-interaction --optimize-autoloader && \
            echo '✅ Dependencias instaladas correctamente'"

    # Contenedor para ejecutar migraciones
    migrate-optimize:
        build:
            args:
                user: "${APP_USER:-sammy}"
                uid: "${APP_UID:-1000}"
            context: .
            dockerfile: dockerfiles/php.dockerfile
        container_name: monitor-migrate-optimize
        volumes:
            - ./:/var/www
        working_dir: /var/www
        depends_on:
            - db
            - setup
        entrypoint: [ "/bin/sh", "-c" ]
        command: |
            "php artisan migrate --force && \
                echo ✅ Migraciones ejecutadas correctamente && \
             php artisan optimize:clear && \
                echo ✅ Cache de configuración limpiado correctamente
            "

        networks:
            - monitor-tanques-network

networks:
    monitor-tanques-network:
        driver: bridge

volumes:
    monitor-tanques-mariadb:
        driver: local
